"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[281],{1579:function(e,t,a){a.r(t),a.d(t,{default:function(){return r}});var s=a(4554),n=a(890),o=a(184);function r(){return(0,o.jsx)(s.Z,{id:"StateUpdating",children:(0,o.jsxs)(n.Z,{paragraph:!0,children:["I can never remember how to update an array of objects using React\u2019s useState hook. When I Google \u201cuseState array update\u201d, most of the StackOverflow links are already purple. I\u2019m writing a blog post on it and I\u2019m still going to have to look it up later I\u2019m sure. There might be an example buried deep in the React docs somewhere I can reference, but the main idea is that the array of objects (or really any value) should be treated as immutable. Which is confusing, because it isn\u2019t actually immutable. You can change it as you like. It\u2019s just not \u201cbest practice\u201d to do so. Below is a simple React useState array update example. It\u2019s essentially some functions that perform the basic CRUD (create read update delete) operations on the state array. Try clicking on the Add Item button to add some items to the list. Then try changing the values in the inputs.",(0,o.jsx)("pre",{children:(0,o.jsx)("code",{className:"language-jsx"})})]})})}}}]);
//# sourceMappingURL=281.b3571e82.chunk.js.map